{"version":3,"file":"static/js/283.9706ad4e.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/TestPage/TestPage.module.css?d062","components/TestPage/ReactHookForm/ReactHookForm.jsx","components/TestPage/FormikForm/FormikForm.jsx","components/TestPage/TestPageContainer.js","components/TestPage/TestPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"test\":\"TestPage_test__jVEWa\",\"folder\":\"TestPage_folder__PQ8HN\",\"input\":\"TestPage_input__OZztS\",\"btn\":\"TestPage_btn__wpYFZ\",\"field\":\"TestPage_field__kNsd4\",\"result\":\"TestPage_result__EypO7\",\"small\":\"TestPage_small__Kzljm\",\"gray\":\"TestPage_gray__lrdkk\",\"errorText\":\"TestPage_errorText__MRrnJ\"};","import React from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Button from \"@mui/material/Button\";\r\nimport s from \"../TestPage.module.css\";\r\n\r\nexport const ReactHookForm = (props) => {\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors },\r\n  } = useForm({ mode: 'onBlur', reValidateMode: 'onChange' });\r\n\r\n  const onSubmit = (values) => {\r\n    props.addHookFieldToState(values);\r\n    reset();\r\n  };\r\n  const HookResult = () => {\r\n    return (\r\n        props.hookMessage ?\r\n      <div>\r\n        <span className='pr-4'>{`Имя : ${props.hookMessage?.hookName}`}</span>\r\n        <span className='pr-4'>{`Текст : ${props.hookMessage?.hookText}`}</span>\r\n      </div>\r\n      : 'Результат из State'\r\n    );\r\n  };\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit(onSubmit)} className=\"pt-8 pb-5\">\r\n        <Grid container spacing={2}>\r\n          <Grid item md={4}>\r\n            <TextField\r\n              fullWidth\r\n              id=\"name\"\r\n              label=\"Имя\"\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n              error={errors.hookName ? true : false}\r\n              {...register(\"hookName\", {\r\n                required: \"Обязательно к заполнению\",\r\n                minLength: {\r\n                  value: 2,\r\n                  message: \"Минимальная длина 2 символа\",\r\n                },\r\n                maxLength: {\r\n                  value: 20,\r\n                  message: \"Максимальная длина 20 символов\",\r\n                },\r\n              })}\r\n            />\r\n            <div className={s.errorText}>{errors.hookName?.message}</div>\r\n          </Grid>\r\n          <Grid item md={4}>\r\n            <TextField\r\n              fullWidth\r\n              id=\"text\"\r\n              label=\"Текст\"\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n              error={errors.hookText ? true : false}\r\n              multiline\r\n              {...register(\"hookText\", {\r\n                required: \"Обязательно к заполнению\",\r\n                minLength: {\r\n                  value: 2,\r\n                  message: \"Минимальная длина 2 символа\",\r\n                },\r\n                maxLength: {\r\n                  value: 20,\r\n                  message: \"Максимальная длина 20 символов\",\r\n                },\r\n              })}\r\n            />\r\n            <div className={s.errorText}>{errors.hookText?.message}</div>\r\n          </Grid>\r\n          <Grid item md={4}>\r\n            <Button\r\n              fullWidth\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              className=\"w-100\"\r\n            >\r\n              Отправить\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </form>\r\n      <Grid container className=\"pb-2\">\r\n        <HookResult />\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useFormik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\n\r\nexport const FormikForm = (props) => {\r\n  const MySchema = Yup.object().shape({\r\n    formikName: Yup.string()\r\n      .required(\"Обязательное поле\")\r\n      .min(2, \"Минимум 2 буквы\")\r\n      .max(20, \"Максимум 20 символов\"),\r\n    formikText: Yup.string()\r\n      .required(\"Обязательное поле\")\r\n      .min(2, \"Минимум 2 буквы\")\r\n      .max(20, \"Максимум 20 символов\"),\r\n  });\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      formikName: \"\",\r\n      formikText: \"\",\r\n    },\r\n    validationSchema: MySchema,\r\n    onSubmit: (values, { resetForm }) => {\r\n      props.addFormikFieldToState(values);\r\n      resetForm();\r\n    },\r\n  });\r\n  const FormikResult = () => {\r\n    return props.formikMessage ? (\r\n      <div className=\"pb-2\">\r\n        <span className=\"pr-4\">{`Имя : ${props.formikMessage?.formikName}`}</span>\r\n        <span className=\"pr-4\">{`Текст : ${props.formikMessage?.formikText}`}</span>\r\n      </div>\r\n    ) : (\r\n      \"Результат из State\"\r\n    );\r\n  };\r\n  return (\r\n    <>\r\n      <form\r\n        onSubmit={formik.handleSubmit}\r\n        className=\"grid grid-cols-3 gap-4 pt-8 pb-5\"\r\n      >\r\n        <div>\r\n          <div>\r\n            <input\r\n              type={\"text\"}\r\n              placeholder=\"Имя\"\r\n              name=\"formikName\"\r\n              onChange={formik.handleChange}\r\n              onBlur={formik.handleBlur}\r\n              value={formik.values.formikName}\r\n              className=\"border-solid border border-gray-300 rounded hover:border-gray-600 mb-0\"\r\n            />\r\n          </div>\r\n          <div className=\"text-red-600 text-sm text-center\">\r\n            {formik.errors.formikName ? formik.errors.formikName : \"\"}\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <div>\r\n            <input\r\n              type={\"text\"}\r\n              placeholder=\"Текст\"\r\n              name=\"formikText\"\r\n              onChange={formik.handleChange}\r\n              onBlur={formik.handleBlur}\r\n              value={formik.values.formikText}\r\n              className=\"border-solid border border-gray-300 rounded hover:border-gray-600 mb-0\"\r\n            />\r\n          </div>\r\n          <div className=\"text-red-600 text-sm text-center\">\r\n            {formik.errors.formikText ? formik.errors.formikText : \"\"}\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <button\r\n            type={\"submit\"}\r\n            className=\"bg-sky-600 text-white w-full py-2 rounded drop-shadow-md transition-all hover:drop-shadow-lg hover:bg-sky-700\"\r\n          >\r\n            Отправить\r\n          </button>\r\n        </div>\r\n      </form>\r\n      <FormikResult />\r\n    </>\r\n  );\r\n};\r\n","import { connect } from \"react-redux\";\r\nimport { addHookFieldToState, addFormikFieldToState } from \"../../Redux/testPageReducer\";\r\nimport TestPage from './TestPage';\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        hookMessage: state.testPage.hookForms.data,\r\n        formikMessage: state.testPage.formikForms.data\r\n    }\r\n}\r\n\r\nconst TestPageContainer = connect(mapStateToProps,  {\r\n    addHookFieldToState, addFormikFieldToState\r\n})(TestPage);\r\nexport default TestPageContainer;","import React from \"react\";\r\nimport s from \"./TestPage.module.css\";\r\nimport { Container } from \"../../styles/style\";\r\nimport Divider from \"@mui/material/Divider\";\r\nimport { ReactHookForm } from \"./ReactHookForm/ReactHookForm\";\r\nimport { FormikForm } from \"./FormikForm/FormikForm\";\r\n\r\nexport default function TestPage(props) {\r\n  return (\r\n    <section className={s.test}>\r\n      <Container>\r\n        <Divider>React-Hook-Form + Material UI</Divider>\r\n            <ReactHookForm {...props} />\r\n        <Divider>Formik + Yup + Tailwind</Divider>\r\n            <FormikForm {...props} />\r\n      </Container>\r\n    </section>\r\n  );\r\n}\r\n"],"names":["ReactHookForm","props","_errors$hookName","_errors$hookText","_useForm","useForm","mode","reValidateMode","register","handleSubmit","reset","errors","formState","HookResult","_props$hookMessage","_props$hookMessage2","hookMessage","_jsxs","children","_jsx","className","concat","hookName","hookText","_Fragment","onSubmit","values","addHookFieldToState","Grid","container","spacing","item","md","TextField","_objectSpread","fullWidth","id","label","variant","size","error","required","minLength","value","message","maxLength","s","multiline","Button","type","FormikForm","MySchema","Yup","shape","formikName","min","max","formikText","formik","useFormik","initialValues","validationSchema","_ref","resetForm","addFormikFieldToState","FormikResult","_props$formikMessage","_props$formikMessage2","formikMessage","placeholder","name","onChange","handleChange","onBlur","handleBlur","connect","state","testPage","hookForms","data","formikForms","Container","Divider"],"sourceRoot":""}